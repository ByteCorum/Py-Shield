name: global-checks

on:
  push:
    branches: [ stable, WIP ]
  pull_request:
    branches: [ stable, WIP ]

jobs:
  build-check-global:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Executable
      run: |
        python -m nuitka --follow-imports --assume-yes-for-downloads --remove-output --onefile --output-filename=py-shield --windows-icon-from-ico=icon.ico --company-name="ByteCorum" --product-name="Py-Shield" --file-version=2.0.1.5 --product-version=2.0.1.5 --file-description="Program/Library for Python created to protect your code from decompilation and detection by antiviruses" --copyright="https://github.com/ByteCorum/Py-Shield/blob/main/LICENSE" py-shield.py
      
    - name: Archive Executable
      uses: actions/upload-artifact@v4
      with:
        name: py-shield-executable
        path: py-shield.exe

  obfuscation-test-global:
    needs: build-check-global
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download Executable
      uses: actions/download-artifact@v4
      with:
        name: py-shield-executable
        path: ""
    
    - name: Prepare For Tests
      run: |
        move "py-shield.exe" "examples/multifile-global"
        Remove-Item -Path "examples\multifile-global\obfuscated" -Recurse -Force

    - name: Obfuscate
      working-directory: examples\multifile-global
      run: |
        .\py-shield.exe --mode "hashstr;crypt;looping;aes" --loops 3 --output obfuscated --follow imports --files lib.py main.py

    - name: Testing
      working-directory: examples\multifile-global\obfuscated
      run: |
        $OUTPUT = $(python main.py)
        Write-Host "Output: "
        Write-Host $OUTPUT
        
        Write-Host "Result: "
        if ($OUTPUT -eq "hello world") {
          Write-Host "Success: main.py output contains 'hello world'"
        } else {
          Write-Host "Failure: main.py output does not contain 'hello world'"
          exit 1
        }